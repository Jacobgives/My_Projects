>>> u1 = User.objects.get(id=1)
>>> u2 = User.objects.get(id=2)
>>> u3 = User.objects.get(id=3)
>>> b1 = Book.objects.get(id=1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/usr/lib/python2.7/dist-packages/django/db/models/manager.py", line 127, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/usr/lib/python2.7/dist-packages/django/db/models/query.py", line 334, in get
    self.model._meta.object_name
DoesNotExist: Book matching query does not exist.
>>> b1 = Book.objects.get(id=2)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/usr/lib/python2.7/dist-packages/django/db/models/manager.py", line 127, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/usr/lib/python2.7/dist-packages/django/db/models/query.py", line 334, in get
    self.model._meta.object_name
DoesNotExist: Book matching query does not exist.
>>> Book.objects.all()
[]
>>> Book.objects.create(name="u1book1",desc="an epic tale with a self-explanatory title",uploaded_by_id=u1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
  File "/usr/lib/python2.7/dist-packages/django/db/models/manager.py", line 127, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "/usr/lib/python2.7/dist-packages/django/db/models/query.py", line 346, in create
    obj = self.model(**kwargs)
  File "/usr/lib/python2.7/dist-packages/django/db/models/base.py", line 480, in __init__
    raise TypeError("'%s' is an invalid keyword argument for this function" % list(kwargs)[0])
TypeError: 'uploaded_by_id' is an invalid keyword argument for this function
>>> Book.objects.create(name="u1book1",desc="an epic tale with a self-explanatory title",Uploaded_by_id=u1)
<Book: Book object>
>>> Book.objects.create(name="u1book2",desc="an epic tale with a self-explanatory title",Uploaded_by_id=u1)
<Book: Book object>
>>> Book.objects.create(name="u2book1",desc="an epic tale with a self-explanatory title",Uploaded_by_id=u2)
<Book: Book object>
>>> Book.objects.create(name="u2book2",desc="an epic tale with a self-explanatory title",Uploaded_by_id=u2)
<Book: Book object>
>>> Book.objects.create(name="u2book2",desc="an epic tale with a self-explanatory title",Uploaded_by_id=u3)
<Book: Book object>
>>> Book.objects.create(name="u2book1",desc="an epic tale with a self-explanatory title",Uploaded_by_id=u3)
<Book: Book object>
>>> b1=book.objects.get(id=1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'book' is not defined
>>> b1=Book.objects.get(id=1)
>>> b2=Book.objects.get(id=2)
>>> b3=Book.objects.get(id=3)
>>> b4=Book.objects.get(id=4)
>>> b5=Book.objects.get(id=5)
>>> b6=Book.objects.get(id=6)
>>> u1.booklikes.add(b1, b6)
>>> u2.booklikes.add(b1, b3)
>>> u3.booklikes.add(b1,b2, b3,b4,b5,b6)
>>> b1.userlikes.all()
[<User: User object>, <User: User object>, <User: User object>]
>>> b1.uploader.get()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Book' object has no attribute 'uploader'
>>> b1.uploaded_by_id.get()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Book' object has no attribute 'uploaded_by_id'
>>> b1.Uploaded_by_id.get()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'User' object has no attribute 'get'
>>> b1.Uploaded_by_id
<User: User object>
>>> b1.Uploaded_by_id.name
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'User' object has no attribute 'name'
>>> b1.Uploaded_by_id.first_name
u'JimBob'
>>> b2.userlikes.all().first_name
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'QuerySet' object has no attribute 'first_name'
>>> b2.userlikes.all().values()
[{'first_name': u'Jacob', 'last_name': u'Givens', 'created_at': datetime.datetime(2017, 10, 20, 17, 46, 53, 60390, tzinfo=<UTC>), 'updated_at': datetime.datetime(2017, 10, 20, 17, 46, 53, 60470, tzinfo=<UTC>), 'email': u'me@stuffs.com', u'id': 3}]
>>> b1.Uploaded_by_id.first_name
u'JimBob'
>>> b2.Uploaded_by_id.first_name
u'JimBob'
>>> 

